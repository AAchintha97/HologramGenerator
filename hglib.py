# -*- coding: utf-8 -*-
"""hgLib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-E0F8_4eo67kYhDPJt-1t5Ot3hXdpFTI
"""

#function to scale the rotated images
def img_Scaler(img, x_scl_prec, y_scl_prec):
  # Scale the image
  scaled_img = cv2.resize(img, None, fx = x_scl_prec, fy = y_scl_prec)
  cv2.imshow("rotated_img",scaled_img)
  return scaled_img

# Scale the image
def rot_Scaler(img, x_scl_prec, y_scl_prec):
  # Rotate the image left
  lImg = cv2.rotate(img, cv2.ROTATE_90_COUNTERCLOCKWISE)
  lImg = img_Scaler(lImg, x_scl_prec, y_scl_prec)

  # Rotate the image right
  rImg = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
  rImg = img_Scaler(rImg, x_scl_prec, y_scl_prec)

  # Rotate the image bottom
  bImg = cv2.rotate(img, cv2.ROTATE_180)
  bImg = img_Scaler(bImg, x_scl_prec, y_scl_prec)

  # Rotate the image top
  tImg = img_Scaler(img, x_scl_prec, y_scl_prec)

  return tImg, lImg, bImg, rImg

#function to search the end point location of images
def end_Point_Searcher(x_offset, y_offset, img):
  x_end = x_offset_Top + img.shape[1]
  y_end = y_offset_Top + img.shape[0]
  return x_end, y_end

#function to search the location where the images should be places
def img_Draw(img, scaler_W, scaler_H, scaler):
  x_offset = int(scaler_W * scaler * 1)
  y_offset = int(scaler_H * scaler * 1)
  x_end, y_end = end_Point_Searcher(x_offset, y_offset, img)
  return x_offset, y_offset, x_end, y_end

def holo_Image(canvas, scaler_W, scaler_H, img_Top, img_Left, img_Bottom, img_Right, scaler):
  #Draw the left image
  x_offset, y_offset, x_end, y_end = img_Draw(img_Top, scaler_W, 0, scaler)
  canvas[y_offset:y_end,x_offset:x_end] = lImg

  #Draw the right image
  img_Draw(img_Right, (2 * scaler_W), scaler_H, scaler)
  canvas[y_offset:y_end,x_offset:x_end] = lImg

  #Draw the right image
  img_Draw(img_Bottom, scaler_W, (2 * scaler_H), scaler)
  canvas[y_offset:y_end,x_offset:x_end] = lImg

  #Draw the right image
  img_Draw(img_Left, 0, scaler_H, scaler)
  canvas[y_offset:y_end,x_offset:x_end] = lImg

  #print canvas
  cv2.imshow('Hologram Image', canvas)